-> example flask app lesson  
   -> build and run your first flask app  

-> introduction to repl.it and flask basics  
   -> this lesson introduces how to build and run a simple flask app using an online coding platform called repl.it  
   -> repl.it is a browser-based development environment that allows you to write, run, and test your code without needing local setup  
   -> the lesson focuses on creating a basic flask application that returns a "hello web world!" message when accessed  

-> what is flask?  
   -> flask is a lightweight web framework for python that allows you to create web applications with minimal setup  
   -> it provides the tools needed to define routes, handle http requests, and generate responses  

-> setting up repl.it for flask development  
   -> visit repl.it and create a new python project  
   -> repl.it allows you to write your flask code in a central code editor window, run the application, and preview your web app in a browser  

-> writing your first flask app  
   -> open the code editor in repl.it and input the following python code to set up your flask app:  
      ```python  
      from flask import Flask  # import the flask library  
      app = Flask(__name__)  # create an instance of the flask application  

      # define the root route ('/') of your app  
      @app.route('/')  
      def index():  
          return "hello web world!"  # return a response when the route is accessed  

      if __name__ == '__main__':  
          # run the flask application on a specific host and port  
          app.run(host='0.0.0.0', port=8080)  
      ```  

   -> key components of the code:  
      -> **`flask` import**: brings in the flask class for creating the web app  
      -> **`app = flask(__name__)`**: instantiates the application, linking it to the current module  
      -> **route definition**: the `@app.route('/')` decorator specifies that the `index` function should handle requests to the root url (`/`)  
      -> **return statement**: `return "hello web world!"` sends "hello web world!" as a response to the browser  
      -> **`app.run`**: starts the web server, making the app accessible  

-> running your flask app  
   -> click the "run" button in repl.it to execute your code  
   -> repl.it will display a log in the console, showing that the flask app has started  
   -> a preview url is provided; click the link to open your web browser and view the output  

-> testing the application  
   -> when you access the app through the preview url, the message "hello web world!" will appear in your browser  
   -> this confirms your flask app is running correctly  

-> modifying and experimenting with the flask app  
   -> to customise the response, change the message in the `return` statement of the `index` function  
      -> example: change `"hello web world!"` to `"welcome to my flask app!"`  
   -> save and rerun the app to see the updated output in the browser  

-> troubleshooting common issues  
   -> if the app doesn't work as expected, check the following:  
      -> ensure all parentheses and quotes are properly closed in the code  
      -> verify that the `@app.route('/')` decorator is correctly applied above the `index` function  
      -> confirm that you clicked the "run" button and used the correct preview url  

-> what's next?  
   -> congratulations! if your flask app works, you've created your first web application  
   -> the next steps involve setting up more complex features, such as additional routes, html templates, and handling user input  
   -> this foundational step is crucial as it introduces you to the core structure of flask, which you'll build upon in subsequent lessons